# using packages
library(tidyverse)
library(ggplot2)
library(caTools)
library(ROCR)
library(rpart)
library(rpart.plot)
library(caret)
library(car)
library(carData)
library(dplyr)
#Loading the file
brexit <- read.csv("brexit.csv")
str(brexit)
head(brexit)
view(brexit)
brexit$voteBrexit <- as.numeric(brexit$voteBrexit)
nrow(brexit)
#Splitting the data
set.seed(2)
split <- sample.split(brexit, SplitRatio = 0.8)
split
train <- subset(brexit, split == "TRUE")
test <- subset(brexit, split == "FALSE")
nrow(train)
# fitting data to the model
model <- glm(voteBrexit ~ ., family = binomial, data = train)
summary(model)
vif(model)
# Ordering the coefficients based on their magnitudes
summary_coef <- summary(model)$coefficients
preds <- predict.glm(model, test, type = c("response"))
#convert predictions to 1 or 0
prediction_probs <- ifelse(pred > 0.5, 1, 0)
confusionMatrix(table(test$voteBrexit, prediction_probs))
#convert predictions to 1 or 0
prediction_probs <- ifelse(pred > 0.5, 1, 0)
#convert predictions to 1 or 0
prediction_probs <- ifelse(preds > 0.5, 1, 0)
confusionMatrix(table(test$voteBrexit, prediction_probs))
confusionMatrix(table(test$voteBrexit, prediction_probs))
#ROC-AUC Curve
ROCPred <- prediction(prediction_probs, test$voteBrexit)
ROCPer <- performance(ROCPred, measure = "tpr",
x.measure = "fpr")
auc <- performance(ROCPred, measure = "auc")
auc <- auc@y.values[[1]]
auc # first model: 0.8132, second model: 0.8198
ROCPer
# Plotting curve
plot(ROCPer)
plot(ROCPer, colorize = TRUE,
print.cutoffs.at = seq(0.1, by = 0.1),
main = "ROC CURVE")
cor(test$withHigherEd, pred)
# Plotting the predictions
plot(test$withHigherEd, test$voteBrexit, xlab = "Higher Educated Individuals")
lines(smooth.spline(brexit$withHigherEd, prediction_probs), col = "blue", lwd=2)
ggplot(test, aes(x=pred, y=medianIncome, color = voteBrexit)) +
geom_point(alpha=.7, stroke = 1, size=1.5) +
geom_line(aes(x = 0.5, y = 0.5)) +
scale_color_gradient(low = "#ffee00", high = "#00b3ff") +
theme_classic() +
coord_fixed(xlim = c(0, 1), ylim = c(0, 1)) + # set fixed axis ranges
geom_vline(xintercept = 0.5, color = "gray", alpha = 0.5) + # add vertical line at x-mean
geom_hline(yintercept = 0.5, color = "gray", alpha = 0.25) # add horizontal line at y-mean
pred <- predict.glm(model, test, type = c("response"))
#convert predictions to 1 or 0
prediction_probs <- ifelse(preds > 0.5, 1, 0)
confusionMatrix(table(test$voteBrexit, prediction_probs))
ggplot(test, aes(x=pred, y=medianIncome, color = voteBrexit)) +
geom_point(alpha=.7, stroke = 1, size=1.5) +
geom_line(aes(x = 0.5, y = 0.5)) +
scale_color_gradient(low = "#ffee00", high = "#00b3ff") +
theme_classic() +
coord_fixed(xlim = c(0, 1), ylim = c(0, 1)) + # set fixed axis ranges
geom_vline(xintercept = 0.5, color = "gray", alpha = 0.5) + # add vertical line at x-mean
geom_hline(yintercept = 0.5, color = "gray", alpha = 0.25) # add horizontal line at y-mean
ggplot(test, aes(x=pred, y=medianIncome, color = voteBrexit)) +
geom_point(alpha=.7, stroke = 1, size=1.5) +
geom_line(aes(x = 0.25, y = 0.5)) +
scale_color_gradient(low = "#ffee00", high = "#00b3ff") +
theme_classic() +
coord_fixed(xlim = c(0, 1), ylim = c(0, 1)) + # set fixed axis ranges
geom_vline(xintercept = 0.5, color = "gray", alpha = 0.5) + # add vertical line at x-mean
geom_hline(yintercept = 0.5, color = "gray", alpha = 0.25) # add horizontal line at y-mean
ggplot(test, aes(x=pred, y=medianIncome, color = voteBrexit)) +
geom_point(alpha=.7, stroke = 1, size=1.5) +
geom_line(aes(x = 0.5, y = 0.5)) +
scale_color_gradient(low = "#ffee00", high = "#00b3ff") +
theme_classic() +
coord_fixed(xlim = c(0, 1), ylim = c(0, 1)) + # set fixed axis ranges
geom_vline(xintercept = 0.5, color = "gray", alpha = 0.25) + # add vertical line at x-mean
geom_hline(yintercept = 0.5, color = "gray", alpha = 0.25) # add horizontal line at y-mean
ggplot(test, aes(x=pred, y=medianIncome, color = voteBrexit)) +
geom_point(alpha=.7, stroke = 1, size=1.5) +
geom_line(aes(x = 0.5, y = 0.5)) +
scale_color_gradient(low = "#ffee00", high = "#00b3ff") +
theme_classic() +
coord_fixed(xlim = c(0, 1), ylim = c(0, 1)) + # set fixed axis ranges
geom_vline(xintercept = 0.5, color = "gray", alpha = 0.25) + # add vertical line at x-mean
geom_hline(yintercept = 0.5, color = "gray", alpha = 0.15) # add horizontal line at y-mean
ggplot(test, aes(x=pred, y=medianIncome, color = voteBrexit)) +
geom_point(alpha=.7, stroke = 1, size=1.5) +
geom_line(aes(x = 0.5, y = 0.5)) +
scale_color_gradient(low = "#ffee00", high = "#00b3ff") +
theme_classic() +
coord_fixed(xlim = c(0, 1), ylim = c(0, 1)) + # set fixed axis ranges
geom_vline(xintercept = 0.5, color = "gray", alpha = 0.25) + # add vertical line at x-mean
geom_hline(yintercept = 0.5, color = "gray", alpha = 0.1) # add horizontal line at y-mean
ggplot(test, aes(x=pred, y=withHigherEd, color = voteBrexit)) +
geom_point(alpha=.7, stroke = 1, size=1.5) +
geom_line(aes(x = 0.5, y = 0.5)) +
scale_color_gradient(low = "#ffee00", high = "#00b3ff") +
theme_classic() +
coord_fixed(xlim = c(0, 1), ylim = c(0, 1)) + # set fixed axis ranges
geom_vline(xintercept = 0.5, color = "gray", alpha = 0.25) + # add vertical line at x-mean
geom_hline(yintercept = 0.5, color = "gray", alpha = 0.1) # add horizontal line at y-mean
ggplot(test, aes(x=pred, y=abc1, color = voteBrexit)) +
geom_point(alpha=.7, stroke = 1, size=1.5) +
geom_line(aes(x = 0.5, y = 0.5)) +
scale_color_gradient(low = "#ffee00", high = "#00b3ff") +
theme_classic() +
coord_fixed(xlim = c(0, 1), ylim = c(0, 1)) + # set fixed axis ranges
geom_vline(xintercept = 0.5, color = "gray", alpha = 0.25) + # add vertical line at x-mean
geom_hline(yintercept = 0.5, color = "gray", alpha = 0.1) # add horizontal line at y-mean
ggplot(test, aes(x=pred, y=medianIncome, color = voteBrexit)) +
geom_point(alpha=.7, stroke = 1, size=1.5) +
geom_line(aes(x = 0.5, y = 0.5)) +
scale_color_gradient(low = "#ffee00", high = "#00b3ff") +
theme_classic() +
coord_fixed(xlim = c(0, 1), ylim = c(0, 1)) + # set fixed axis ranges
geom_vline(xintercept = 0.5, color = "gray", alpha = 0.25) + # add vertical line at x-mean
geom_hline(yintercept = 0.5, color = "gray", alpha = 0.1) # add horizontal line at y-mean
vif(model)
brexit_reduced <- select(brexit, -abc1)
#Splitting the data into training & testing (80:20)
set.seed(2)
train_reduced <- subset(brexit_reduced, split == "TRUE")
test_reduced <- subset(brexit_reduced, split == "FALSE")
nrow(train_reduced)
# Training the model
model_new <- glm(voteBrexit ~ ., data = train_reduced, family = "binomial")
summary(model_new)
# Predictions
predictions_new <- predict(model_new, newdata = test_reduced, type = "response")
# Convert predictions to 1 or 0
prediction_conv <- ifelse(predictions_new > 0.5, 1, 0)
#Create a confusion matrix
cm2 <- confusionMatrix(table(test_reduced$voteBrexit, prediction_conv))
cm2$overall["Accuracy"]
cm2
